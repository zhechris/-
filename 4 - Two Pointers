对撞型指针题目
一. two sum
59. 3Sum Closest
public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @param target: An integer
     * @return: return the sum of the three integers, the sum closest target.
     */
    public int threeSumClosest(int[] numbers, int target) {
        // write your code here
        if(numbers == null || numbers.length < 3){
            return 0;
        }
        
        Arrays.sort(numbers);
        int res = Integer.MAX_VALUE;
        
        for(int i = 0; i < numbers.length - 2; i++){
            int l = i + 1;
            int r = numbers.length - 1;
            while(l < r){
                int sum = numbers[i] + numbers[l] + numbers[r];
                if(Math.abs(target - sum) < Math.abs(target - res)){
                    res = sum;
                } 
                if(sum > target){
                    r--;
                }else{
                    l++;
                }
            }
        }
        return res;
    }
}

57. 3Sum
public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @return: Find all unique triplets in the array which gives the sum of zero.
     */
    public List<List<Integer>> threeSum(int[] numbers) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        if(numbers == null || numbers.length < 3){
            return res;
        }
        Arrays.sort(numbers);
        for(int i = 0; i < numbers.length - 2; i++){
            int l = i + 1;
            int r = numbers.length - 1;
            
            while(l < r){
                int sum = numbers[i] + numbers[l] + numbers[r];
             
                if(sum < 0){
                    l++;
                } else if(sum > 0){
                    r--;
                } else{
                    List<Integer> temp = new ArrayList<>();
                    temp.add(numbers[i]);
                    temp.add(numbers[l]);
                    temp.add(numbers[r]);
                    if(!set.contains(temp)){
                        set.add(temp);
                        res.add(temp);
                    }
                    l++;
                    r--;
                }
            }
        }
        return res;
    }
}

58. 4Sum
public class Solution {
    /**
     * @param numbers: Give an array
     * @param target: An integer
     * @return: Find all unique quadruplets in the array which gives the sum of zero
     */
    public List<List<Integer>> fourSum(int[] numbers, int target) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        if(numbers == null || numbers.length < 4){
            return res;
        }
        Arrays.sort(numbers);
        for(int i = 0; i < numbers.length - 3; i++){
            for(int j = i + 1; j < numbers.length - 2; j++){
                int l = j + 1;
                int r = numbers.length - 1;
                while(l < r){
                    int sum = numbers[i] + numbers[j] + numbers[l] + numbers[r];
                    if(sum == target){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(numbers[i]);
                        temp.add(numbers[j]);
                        temp.add(numbers[l]);
                        temp.add(numbers[r]);
                        if(!set.contains(temp)){
                            set.add(temp);
                            res.add(temp);
                        }
                        l++;
                        r--;
                    } else if(sum < target){
                        l++;
                    } else{
                        r--;
                    }
                }
            }
        }
        return res;
    }
}

89. k Sum
public class Solution {
    /**
     * @param A: An integer array
     * @param k: A positive integer (k <= length(A))
     * @param target: An integer
     * @return: An integer
     */
    public int kSum(int[] nums, int k, int target) {
        // write your code here
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        result = recursionRoutin(nums,0,k,target);
        return result.size();
    }
    public List<List<Integer>> recursionRoutin(int[] nums,int begin,int k,int target){
        HashSet<List<Integer>> elementSet = new HashSet<List<Integer>>();
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<List<Integer>> subResult = new ArrayList<List<Integer>>();
        if(k == 1){
            for(int i = 0; i < nums.length; i++){
                if(nums[i] == target){
                    List<Integer> taplet = new ArrayList<Integer>();
                    taplet.add(nums[i]);
                    result.add(taplet);
                }
            }
        }
        //Recursion Base
        else if(k == 2){
            int left = begin;
            int right = nums.length - 1;
            while(left < right){
                int sum = nums[left] + nums[right];
                if(sum == target){
                    List<Integer> taplet = new ArrayList<Integer>();
                    taplet.add(nums[left]);
                    taplet.add(nums[right]);
                    //Avoid reduplication 
                    if(!elementSet.contains(taplet)){
                        result.add(taplet);
                        elementSet.add(taplet);
                    }
                    left ++;
                    right --;
                }else if(sum < target){
                    left ++;
                }else{
                    right --;
                }
            }
            return result;
        }else{

            for(int i = begin;i < nums.length - k - 1;i ++){
                subResult = recursionRoutin(nums,i + 1,k - 1,target - nums[i]);
                //System.out.println(k + " " + subResult);
                if(!subResult.isEmpty()){
                    for(int j = 0;j < subResult.size();j ++){
                        subResult.get(j).add(nums[i]);
                        result.add(subResult.get(j));
                    }
                }
            }
        }
        return result;
    }
}

382. Triangle Count
public class Solution {
    /**
     * @param S: A list of integers
     * @return: An integer
     */
    public int triangleCount(int[] S) {
        // write your code here
        if(S == null || S.length < 3){
            return 0;
        }
        Arrays.sort(S);
        int count = 0;
        for(int i = 0; i < S.length; i++){
            int l = 0; 
            int r = i - 1;
            while(l < r){
                if(S[l] + S[r] > S[i]){
                    count += r - l;
                    r--;
                } else{
                    l++;
                }
            }
        }
        return count;
    }
}

363. Trapping Rain Water
public class Solution {
    /**
     * @param heights: a list of integers
     * @return: a integer
     */
    public int trapRainWater(int[] heights) {
        // write your code here
        if(heights == null || heights.length < 2){
            return 0;
        }
        
        int l = 0;
        int r = heights.length - 1;
        
        int lheight = heights[l];
        int rheight = heights[r];
        int res = 0;
        
        while(l < r){
            if(lheight < rheight){
                ++l;//for 循环里面i++和++i一样的，只有赋值才不一样
                if(lheight > heights[l]){
                    res += lheight - heights[l];
                    
                } else{
                    lheight = heights[l];
                }
            } else{
                --r;
                if(rheight > heights[r]){
                    res += rheight - heights[r];
                    
                } else{
                    rheight = heights[r];
                }
            }
        }
        return res;
    }
}

383. Container With Most Water
public class Solution {
    /**
     * @param heights: a vector of integers
     * @return: an integer
     */
    public int maxArea(int[] heights) {
        // write your code here
        if(heights == null || heights.length < 2){
            return 0;
        }
        
        int maxarea = 0;
        int left = 0;
        int right = heights.length - 1;
        
        while(left < right){
            int temparea = (right - left) * Math.min(heights[left], heights[right]);
            maxarea = Math.max(maxarea, temparea);
            if(heights[left] < heights[right]){
                left++;
            } else{
                right--;
            }
        }
        return maxarea;
    }
}

二. partition 
31. Partition Array
public class Solution {
    /**
     * @param nums: The integer array you should partition
     * @param k: An integer
     * @return: The index after partition
     */
    public int partitionArray(int[] nums, int k) {
        // write your code here
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        int left = 0; int right = nums.length - 1;
        //int pivot = nums[left];
        
        while(left <= right){
            while(left <= right && nums[left] < k){
                left++;
            }
            while(left <= right && nums[right] >= k){
                right--;
            }
            if(left <= right){
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                left++;
                right--;
            }
        }
        return left;
    }
}

148. Sort Colors
public class Solution {
    public void sortColors(int[] a) {
        if (a == null || a.length <= 1) {
            return;
        }
        
        int pl = 0;
        int pr = a.length - 1;
        int i = 0;
        //加入一个指针i当成左移动指针，pl作为操作过的左边指针
        while (i <= pr) {
            if (a[i] == 0) {
                swap(a, pl, i);
                pl++;
                i++;
            } else if(a[i] == 1) {
                i++;
            } else {
                swap(a, pr, i);
                pr--;
            }
        }
    }
    
    private void swap(int[] a, int i, int j) {
        int tmp = a[i];
        a[i] = a[j];
        a[j] = tmp;
    }
}

373. Partition Array by Odd and Even
public class Solution {
    /*
     * @param nums: an array of integers
     * @return: nothing
     */
    public void partitionArray(int[] nums) {
        // write your code here
        if(nums == null || nums.length < 2){
            return;
        }
        
        int left = 0;
        int right = nums.length - 1;
        
        while(left <= right){
            while(left <= right && (nums[left] % 2) == 1){
                left++;
            }
            while(left <= right && (nums[right] % 2) == 0){
                right--;
            }
            
            if(left <= right){
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                left++;
                right--;
            }
        }
    }
}

49. Sort Letters by Case
public class Solution {
    /*
     * @param chars: The letter array you should sort by Case
     * @return: nothing
     */
    public void sortLetters(char[] chars) {
        // write your code here
        if(chars == null || chars.length < 2){
            return;
        }
        
        int left = 0;
        int right = chars.length - 1;
        
        while(left <= right){
            while(left <= right && chars[left] <= 'z' && chars[left] >= 'a'){
                left++;
            }
            while(left <= right && chars[right] <= 'Z' && chars[left] >= 'A'){
                right--;
            }
            
            if(left <= right){
                char temp = chars[left];
                chars[left] = chars[right];
                chars[right] = temp;
                left++;
                right--;
            }
        }
    }
}

415. Valid Palindrome
public class Solution {
    /**
     * @param s: A string
     * @return: Whether the string is a valid palindrome
     */
    public boolean isPalindrome(String s) {
        // write your code here
        if(s == null || s.length() == 0){
            return true;
        }
        
        int left = 0;
        int right = s.length() - 1;
        
        while(left <= right){
            while(left < s.length() && !isValid(s.charAt(left))){
                left++;
            }
            
            if(left == s.length()){
                return true;//judge a string like ",, ,," is null
            }
            
            while(right >= 0 && !isValid(s.charAt(right))){
                right--;
            }
            
            if(left <= right && Character.toLowerCase(s.charAt(left)) == Character.toLowerCase(s.charAt(right))){
                left++;
                right--;
            } else{
                break;
            }
        }
        return left > right;
    }
    public boolean isValid(char c){
        if(Character.isLetter(c) || Character.isDigit(c)){
            return true;
        }
        return false;
    }
}

5. Kth Largest Element
class Solution {
    /*
     * @param k : description of k
     * @param nums : array of nums
     * @return: description of return
     */
    public int kthLargestElement(int k, int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0){
            return 0;
        }
        if(k <= 0){
            return 0;
        }
        return quickSelecthelper(nums, 0, nums.length - 1, nums.length - k + 1);
    }

    private int quickSelecthelper(int[] nums, int l, int r, int k) {
        if(l == r){
            return nums[l];
        }
        int position = quickSelect(nums, l , r);

        if(position + 1 == k){
            return nums[position];
        } else if(position + 1 < k){
            return quickSelecthelper(nums, position + 1, r, k);
        } else{
            return quickSelecthelper(nums, l, position - 1, k);
        }

    }
    public int quickSelect(int[] nums, int l, int r){
        int left = l, right = r;
        int pivot = nums[l];
        while(left < right){
            while(left < right && nums[right] >= pivot){
                right--;
            }
            nums[left] = nums[right];
            while(left < right && nums[left] <= pivot){
                left++;
            }
            nums[right] = nums[left];
        }
        /*
        这种换法有的test过不了，不知道为啥
        int left = l, right = r;
        int pivot = nums[l];
        while(left <= right){
            while(left <= right && nums[left] < pivot){
                left++;
            }
            while(left <= right && nums[right] >= pivot){
                right--;
            }
            if(left <= right){
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                left++;
                right--;
            }
        }
        return left;*/

        nums[left] = pivot;
        return left;
    }
}
//也可以用优先队列，O(Klogn)
class Solution {
    /*
     * @param k : description of k
     * @param nums : array of nums
     * @return: description of return
     */
    public int kthLargestElement(int k, int[] nums) {
        // write your code here
        PriorityQueue<Integer> q = new PriorityQueue<Integer>(new Comparator<Integer>(){
            public int compare(Integer n1, Integer n2){
                return n1 - n2;//大于0，把前一个和后一个互换，n1>n2,n1,n2
              //return n2.val-n1.val;大于0，把前一个和后一个互换，n2>n1,n2.n1,就反了
            }
        });
        for(int i: nums){
            q.offer(i);
     
            if(q.size()>k){
                q.poll();
            }
        }
        return q.peek();
    }
}

399. Nuts & Bolts Problem
/**
 * public class NBCompare {
 *     public int cmp(String a, String b);
 * }
 * You can use compare.cmp(a, b) to compare nuts "a" and bolts "b",
 * if "a" is bigger than "b", it will return 1, else if they are equal,
 * it will return 0, else if "a" is smaller than "b", it will return -1.
 * When "a" is not a nut or "b" is not a bolt, it will return 2, which is not valid.
*/
public class Solution {
    /**
     * @param nuts: an array of integers
     * @param bolts: an array of integers
     * @param compare: a instance of Comparator
     * @return: nothing
     */
    public void sortNutsAndBolts(String[] nuts, String[] bolts, NBComparator compare) {
        if (nuts == null || bolts == null) return;
        if (nuts.length != bolts.length) return;

        qsort(nuts, bolts, compare, 0, nuts.length - 1);
    }

    private void qsort(String[] nuts, String[] bolts, NBComparator compare, 
                       int l, int u) {
        if (l >= u) return;
        // find the partition index for nuts with bolts[l]
        int part_inx = partition(nuts, bolts[l], compare, l, u);
        // partition bolts with nuts[part_inx]
        partition(bolts, nuts[part_inx], compare, l, u);
        // qsort recursively
        qsort(nuts, bolts, compare, l, part_inx - 1);
        qsort(nuts, bolts, compare, part_inx + 1, u);
    }
    
    private int partition(String[] str, String pivot, NBComparator compare, 
                          int l, int u) {
        for (int i = l; i <= u; i++) {
            if (compare.cmp(str[i], pivot) == 0 || 
                compare.cmp(pivot, str[i]) == 0) {
                swap(str, i, l);
                break;
            }
        }
        String now = str[l];
        int left = l; 
        int right = u;
        while (left < right) {
            while (left < right && 
            (compare.cmp(str[right], pivot) == 1 || 
            compare.cmp(pivot, str[right]) == -1)) {
                right--;
            }
            str[left] = str[right];
            
            while (left < right && 
            (compare.cmp(str[left], pivot) == -1 || 
            compare.cmp(pivot, str[left]) == 1)) {
                left++;
            }
            str[right] = str[left];
            
        }
        
        str[left] = now;

        return left;
    }

    private void swap(String[] str, int l, int r) {
        String temp = str[l];
        str[l] = str[r];
        str[r] = temp;
    }
}
