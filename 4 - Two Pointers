对撞型指针题目
two sum
59. 3Sum Closest
public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @param target: An integer
     * @return: return the sum of the three integers, the sum closest target.
     */
    public int threeSumClosest(int[] numbers, int target) {
        // write your code here
        if(numbers == null || numbers.length < 3){
            return 0;
        }
        
        Arrays.sort(numbers);
        int res = Integer.MAX_VALUE;
        
        for(int i = 0; i < numbers.length - 2; i++){
            int l = i + 1;
            int r = numbers.length - 1;
            while(l < r){
                int sum = numbers[i] + numbers[l] + numbers[r];
                if(Math.abs(target - sum) < Math.abs(target - res)){
                    res = sum;
                } 
                if(sum > target){
                    r--;
                }else{
                    l++;
                }
            }
        }
        return res;
    }
}

57. 3Sum
public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @return: Find all unique triplets in the array which gives the sum of zero.
     */
    public List<List<Integer>> threeSum(int[] numbers) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        if(numbers == null || numbers.length < 3){
            return res;
        }
        Arrays.sort(numbers);
        for(int i = 0; i < numbers.length - 2; i++){
            int l = i + 1;
            int r = numbers.length - 1;
            
            while(l < r){
                int sum = numbers[i] + numbers[l] + numbers[r];
             
                if(sum < 0){
                    l++;
                } else if(sum > 0){
                    r--;
                } else{
                    List<Integer> temp = new ArrayList<>();
                    temp.add(numbers[i]);
                    temp.add(numbers[l]);
                    temp.add(numbers[r]);
                    if(!set.contains(temp)){
                        set.add(temp);
                        res.add(temp);
                    }
                    l++;
                    r--;
                }
            }
        }
        return res;
    }
}

58. 4Sum
public class Solution {
    /**
     * @param numbers: Give an array
     * @param target: An integer
     * @return: Find all unique quadruplets in the array which gives the sum of zero
     */
    public List<List<Integer>> fourSum(int[] numbers, int target) {
        // write your code here
        List<List<Integer>> res = new ArrayList<>();
        Set<List<Integer>> set = new HashSet<>();
        if(numbers == null || numbers.length < 4){
            return res;
        }
        Arrays.sort(numbers);
        for(int i = 0; i < numbers.length - 3; i++){
            for(int j = i + 1; j < numbers.length - 2; j++){
                int l = j + 1;
                int r = numbers.length - 1;
                while(l < r){
                    int sum = numbers[i] + numbers[j] + numbers[l] + numbers[r];
                    if(sum == target){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(numbers[i]);
                        temp.add(numbers[j]);
                        temp.add(numbers[l]);
                        temp.add(numbers[r]);
                        if(!set.contains(temp)){
                            set.add(temp);
                            res.add(temp);
                        }
                        l++;
                        r--;
                    } else if(sum < target){
                        l++;
                    } else{
                        r--;
                    }
                }
            }
        }
        return res;
    }
}
