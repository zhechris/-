区间类DP
1.区间更新
2.从大到小转移
3.先画出搜索树，再找到转移方程
4.填满对角线右上部分即可
一般步骤
1.来一个sum求和，可能会用到
2.dp的起始点一般为对角线，初始化对角线
3.从下向上，从左到右开始填充，最后结果在右上角
Stone Game
class Solution {
    /**
     * @param A an integer array
     * @return an integer
     */
    public int stoneGame(int[] A) {
        if (A == null || A.length == 0) {
            return 0;
        }
        int n = A.length;
        int[][] sum = new int[n][n];
        int[][] dp = new int[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (i == j) {
                    sum[i][j] = A[j];
                } else {
                    sum[i][j] = sum[i][j - 1] + A[j];
                }
            }
        }
        //初始化对角线
        for (int i = 0; i < n; i++) {
            dp[i][i] = 0;
        }

        for (int delta = 1; delta < n; delta++) {//delta作为区间的长度
            for (int start = 0; start < n - delta; start++) {
                int end = start + delta;
                dp[start][end] = Integer.MAX_VALUE;
                for (int k = start; k < end; k++) {//k最为切分点
                    dp[start][end] = Math.min(dp[start][end], dp[start][k] + dp[k + 1][end] + sum[start][end]);
                }
            }
        }
        return dp[0][n - 1];
    }
}

168. Burst Balloons
public class Solution {
    /**
     * @param nums: A list of integer
     * @return: An integer, maximum coins
     */
    public int maxCoins(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
           return 0; 
        }
        int n = nums.length;
        int[][] dp = new int[n + 2][n + 2];
        
        
        int[] values = new int[n + 2];
        values[0] = values[n + 1] = 1;
        for (int i = 1; i < n + 1; i++) {
        	values[i] = nums[i - 1];
        }
        
        for (int i = n; i >= 1; i--) {
            for (int j = i; j <= n; j++) {
                if (i == j) {
                    dp[i][j] = values[i];
                }
                for (int k = i; k <= j; k++) {
                    int midval = values[i - 1] * values[k] * values[j + 1];//数组外面的是后打爆的，数组里面的已经打爆了，所以当前值应该乘以区间外面的
                    dp[i][j] = Math.max(dp[i][j], dp[i][k - 1] + midval + dp[k + 1][j]);
                }
            }
        }
        return dp[1][n];
    }
}

430. Scramble String
//这道题用递归记忆化搜索好理解
public class Solution {
    /**
     * @param s1: A string
     * @param s2: Another string
     * @return: whether s2 is a scrambled string of s1
     */
    // write your code here
    HashMap<String, Boolean> hash = new HashMap<String, Boolean>();
    
    public boolean isScramble(String s1, String s2) {
        // Write your code here
        /*其实我们首先是把当前 s1[i...i+len-1]字符串劈一刀分成两部分，然后分两种情况：
        第一种是左边和s2[j...j+len-1]左边部分是不是 scramble，以及右边和s2[j...j+len-1]右边部分是不是scramble；
        第二种情况是左边和s2[j...j+len-1]右边部 分是不是scramble，以及右边和s2[j...j+len-1]左边部分是不是scramble。
        如果以上两种情况有一种成立，说明 s1[i...i+len-1]和s2[j...j+len-1]是scramble的。*/
        if (s1.length() != s2.length())
            return false;
            
        if (hash.containsKey(s1 + "#" + s2))
            return hash.get(s1 + "#" + s2);
        
        int n = s1.length();
        if (n == 1) {
            return s1.charAt(0) == s2.charAt(0);
        }
        for (int k = 1; k < n; ++k) {
            if (isScramble(s1.substring(0, k), s2.substring(0, k)) &&
                isScramble(s1.substring(k, n), s2.substring(k, n)) ||
                isScramble(s1.substring(0, k), s2.substring(n - k, n)) &&
                isScramble(s1.substring(k, n), s2.substring(0, n - k))
                ) {
                hash.put(s1 + "#" + s2, true);
                return true;
            }
        }
        hash.put(s1 + "#" + s2, false);
        return false;
    }
}

背包类DP
1.状态用值作为DP的维度
2.可以滚动数组优化
92. Backpack
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    public int backPack(int m, int[] A) {
        // write your code here
        if (A == null || A.length == 0) {
            return 0;
        }
        int n = A.length;
        boolean[][] dp = new boolean[n + 1][m + 1];//在第n个可以取到值为m
        //初始化
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        for (int j = 1; j <= m; j++) {
            dp[0][j] = false;
        }
        
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (j >= A[i-1]) {//这个条件必须满足，不然dp下标会越界
                    dp[i][j] = dp[i - 1][j] || dp[i-1][j - A[i-1]];//不取或者取当前值
                } else{
                    dp[i][j] = dp[i - 1][j];//越界的话就取上一个状态
                }
            }
        }
        for (int i = m; i >=0; i--) {
            if (dp[A.length][i]) {
               return i; 
            }
        }
        return 0;
    }
}

BackPack IV
class Solution {
    public int backPackIV(int[] nums, int target) {
        int n = nums.length;
        int m = target;
        int[][] dp = new int[n + 1][m + 1];//从前几个数字中取出总数满足m的值
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                int k = 0;
                while (k * nums[i - 1] <= j) {
                    dp[i][j] += dp[i - 1][j - k * nums[i - 1]];
                    k++;
                }
            }
        }
        return dp[n][m];
    }
}

BackPackII
public class Solution {
    public int backPackII(int m, int[] A, int V[]) {
    	if (A == null || V == null || A.length != V.length) {
    		return 0;
    	}

    	int n = A.length;
    	int[][] dp = new int[n + 1][m + 1];

    	dp[0][0] = 0;//package size = 0, so value = 0

    	for (int i = 1; i < n; i++) {
    		for(int j = 0; j <= m; j++) {
    			if (j > A[i - 1]) {
    				dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - A[i - 1]] + V[i - 1]);
    			} else {
    				dp[i][j] = dp[i - 1][j];
    			}
    		}
    	}
    	return[n][m];
    }
}
