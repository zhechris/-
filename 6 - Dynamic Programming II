区间类DP
1.区间更新
2.从大到小转移
3.先画出搜索树，再找到转移方程
4.填满对角线右上部分即可
一般步骤
1.来一个sum求和，可能会用到
2.dp的起始点一般为对角线，初始化对角线
3.从下向上，从左到右开始填充，最后结果在右上角
Stone Game
class Solution {
    /**
     * @param A an integer array
     * @return an integer
     */
    public int stoneGame(int[] A) {
        if (A == null || A.length == 0) {
            return 0;
        }
        int n = A.length;
        int[][] sum = new int[n][n];
        int[][] dp = new int[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (i == j) {
                    sum[i][j] = A[j];
                } else {
                    sum[i][j] = sum[i][j - 1] + A[j];
                }
            }
        }
        //初始化对角线
        for (int i = 0; i < n; i++) {
            dp[i][i] = 0;
        }

        for (int delta = 1; delta < n; delta++) {//delta作为区间的长度
            for (int start = 0; start < n - delta; start++) {
                int end = start + delta;
                dp[start][end] = Integer.MAX_VALUE;
                for (int k = start; k < end; k++) {//k最为切分点
                    dp[start][end] = Math.min(dp[start][end], dp[start][k] + dp[k + 1][end] + sum[start][end]);
                }
            }
        }
        return dp[0][n - 1];
    }
}

168. Burst Balloons
public class Solution {
    /**
     * @param nums: A list of integer
     * @return: An integer, maximum coins
     */
    public int maxCoins(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
           return 0; 
        }
        int n = nums.length;
        int[][] dp = new int[n + 2][n + 2];
        
        
        int[] values = new int[n + 2];
        values[0] = values[n + 1] = 1;
        for (int i = 1; i < n + 1; i++) {
        	values[i] = nums[i - 1];
        }
        
        for (int i = n; i >= 1; i--) {
            for (int j = i; j <= n; j++) {
                if (i == j) {
                    dp[i][j] = values[i];
                }
                for (int k = i; k <= j; k++) {
                    int midval = values[i - 1] * values[k] * values[j + 1];//数组外面的是后打爆的，数组里面的已经打爆了，所以当前值应该乘以区间外面的
                    dp[i][j] = Math.max(dp[i][j], dp[i][k - 1] + midval + dp[k + 1][j]);
                }
            }
        }
        return dp[1][n];
    }
}

