Two pointors
56. Two Sum
//这道题以后就用map做，把另一部门的值当成key放进去，下次检索到这个key就是另一个值。
//O(n)的时间复杂度，不要再用双指针，双指针索引不好确定，3sum和4sum可以继续用
public class Solution {
    /**
     * @param numbers: An array of Integer
     * @param target: target = numbers[index1] + numbers[index2]
     * @return: [index1, index2] (index1 < index2)
     */
    public int[] twoSum(int[] numbers, int target) {
        // write your code here
        HashMap<Integer, Integer> map = new HashMap<>();
        int[] res = new int[2];
        if(numbers == null || numbers.length < 2){
            return res;
        }
        for(int i = 0; i <numbers.length; i++){
            if(map.get(numbers[i]) != null){
                res[0] = map.get(numbers[i]);
                res[1] = i;
                return res;
            } else{
                map.put(target - numbers[i], i);
            }
        }
        return res;
    }
}
608. Two Sum II - Input array is sorted
//已经排序好的可以用双指针，O(n)复杂度
public class Solution {
    /**
     * @param nums: an array of Integer
     * @param target: target = nums[index1] + nums[index2]
     * @return: [index1 + 1, index2 + 1] (index1 < index2)
     */
    public int[] twoSum(int[] nums, int target) {
        // write your code here
        int[] res = new int[2];
        if(nums == null || nums.length < 2){
            return res;
        }
        int left = 0;
        int right = nums.length - 1;
        while(left < right){
            if(nums[left] + nums[right] == target){
                res[0] = left + 1;
                res[1] = right + 1;
                return res;
            } else if(nums[left] + nums[right] < target){
                left++;
            } else{
                right--;
            }
        }
        return res;
    }
}

382. Triangle Count
//双指针模板套路，要记住
public class Solution {
    /**
     * @param S: A list of integers
     * @return: An integer
     */
    public int triangleCount(int[] S) {
        // write your code here
        int res = 0;
        if(S == null || S.length < 3){
            return res;
        }
        Arrays.sort(S);
        for(int i = 0; i < S.length; i++){
            int left = 0;
            int right = i - 1;
            while(left < right){
                if(S[left] + S[right] > S[i]){
                    res += right - left;
                    right--;
                } else {
                    left++;
                }
            }
        }
        return res;
    }
}

57. 3Sum
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> list=new ArrayList<>();
        if(nums.length<3||nums==null)
            return list;
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++){
            int low=i+1;
            int high=nums.length-1;
            while(low<high){
                int sum=nums[i]+nums[low]+nums[high];
                if(sum==0){
                    List<Integer> unit=new ArrayList<>();
                    unit.add(nums[i]);
                    unit.add(nums[low]);
                    unit.add(nums[high]);
                    if(!list.contains(unit)){
                        list.add(unit);
                    }
                    low++;
                    high--;
                }
                else if(sum>0)
                    high--;
                else
                    low++;
            }
        }
        return list;
    }
}

59. 3Sum Closest
public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @param target: An integer
     * @return: return the sum of the three integers, the sum closest target.
     */
    public int threeSumClosest(int[] numbers, int target) {
        // write your code here
        if(numbers == null || numbers.length < 3){
            return 0;
        }
        int sum = 0;
        int diff = Integer.MAX_VALUE;
        Arrays.sort(numbers);
        for(int i = 0; i< numbers.length - 2; i++){
            int left = i + 1;
            int right = numbers.length - 1;
            while(left < right){
                int temp = numbers[left] + numbers[right] + numbers[i];
                if(Math.abs(target-temp)<diff){
                    sum=temp;
                    diff=Math.abs(target-temp);
                }
                if(temp == target){
                    return target;
                } else if(temp > target){
                    right--;
                } else{
                    left++;
                }
            }
        }
        return sum;
    }
}

58. 4Sum
public class Solution {
    /**
     * @param numbers: Give an array
     * @param target: An integer
     * @return: Find all unique quadruplets in the array which gives the sum of zero
     */
    public List<List<Integer>> fourSum(int[] numbers, int target) {
        // write your code here
        List<List<Integer>> list = new ArrayList<>();
        if(numbers == null || numbers.length < 4){
            return list;
        }
        Arrays.sort(numbers);
        for(int i = 0; i < numbers.length - 3; i++){
            for(int j = i + 1; j < numbers.length - 2; j++){
                int left = j + 1;
                int right = numbers.length - 1;
                while(left < right){
                    int sum = numbers[i] + numbers[j] + numbers[left] + numbers[right];
                    if(sum == target){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(numbers[i]);
                        temp.add(numbers[j]);
                        temp.add(numbers[left]);
                        temp.add(numbers[right]);
                        if(!list.contains(temp)){
                            list.add(temp);
                        }
                        left++;
                        right--;
                    } else if(sum > target){
                        right--;
                    } else{
                        left++;
                    }
                }
            }
        }
        return list;
    }
}

363. Trapping Rain Water
public class Solution {
    /**
     * @param heights: a list of integers
     * @return: a integer
     */
    public int trapRainWater(int[] heights) {
        // write your code here
        if(heights == null || heights.length < 3){
            return 0;
        }
        int res = 0;
        int l = 0;
        int r = heights.length - 1;
        int leftheight = heights[l];
        int rightheight = heights[r];
        //Two Pointers, l and r. 移动指向高度小的, //因为小的这边围住的水肯定能被大的那一边围住.
        //然后更新高度，用新高度减掉height包含的高度就是这一位置能围住的水量.
        while(l < r){
            if(leftheight < rightheight){
                l++;
                leftheight = Math.max(leftheight, heights[l]);
                res += leftheight - heights[l];
            } else{
                r--;
                rightheight = Math.max(rightheight, heights[r]);
                res += rightheight - heights[r];
            }
        }
        return res;
    }
}

383. Container With Most Water
public class Solution {
    /**
     * @param heights: a vector of integers
     * @return: an integer
     */
    public int maxArea(int[] heights) {
        // write your code here
        if(heights == null || heights.length < 2){
            return 0;
        }
        int maxArea = 0;
        int left = 0;
        int right = heights.length - 1;
        while(left < right){
            maxArea = Math.max(maxArea, (right - left) * Math.min(heights[left], heights[right]));
            if(heights[left] < heights[right]){
                left++;
            } else{
                right--;
            }
        }
        return maxArea;
    }
}

见到集合要想到min/max问题，就要想到heap，进而想到priorityqueue
不会的话就先排序
401. Kth Smallest Number in Sorted Matrix
public class Solution {
    /**
     * @param matrix: a matrix of integers
     * @param k: An integer
     * @return: the kth smallest number in the matrix
     */
    public int kthSmallest(int[][] matrix, int k) {
        // write your code here
        if(matrix.length == 0 || matrix[0].length == 0 || matrix == null){
            return 0;
        }
        int [] dx = new int[]{0, 1};
        int [] dy = new int[]{1, 0};
        int n = matrix.length;//rows
        int m = matrix[0].length;//column
        PriorityQueue<pair> minheap = new PriorityQueue<>(Math.max(n, m), new Comparator<pair>(){//第一个参数为队列的容量
            public int compare(pair a, pair b){
                return a.val - b.val;
            }
        });
        boolean[][] flag = new boolean[n][m];
        minheap.add(new pair(0, 0, matrix[0][0]));
        for(int i = 0; i < k - 1; i ++){
            pair cur = minheap.poll();
            for(int j = 0; j < 2; j ++){
                int next_x = cur.x + dx[j];
                int next_y = cur.y + dy[j];
                pair next_Pair = new pair(next_x, next_y, 0);//set为0的原因是因为next_x和next_y可能超出matrix的index，所以不能直接设置为matrix[next_x][next_y]，需要来一步判断。
                if(next_x < n && next_y < m && !flag[next_x][next_y]){
                    flag[next_x][next_y] = true;
                    next_Pair.val = matrix[next_x][next_y];
                    minheap.add(next_Pair);
                }
            }
        }
        return minheap.peek().val;
        
    }
}
class pair{
    int x, y ,val;
    pair(int x, int y, int val){
        this.x = x;
        this.y = y;
        this.val = val;
    }
}

543. Kth Largest in N Arrays
/*
1. 将每一行从小到大排序
2. 将每一行最大（最后）的元素加入一个最大堆
3. 取出堆顶元素，若此时取出元素数量不足k个，则将取出元素的左边元素（如果存在）加入堆
4. 重复3直到取出k个元素为止*/
//时间复杂度N*Len*Log(len)+K*logN (len是平均每个数组的长度)
public class Solution {
    /**
     * @param arrays a list of array
     * @param k an integer
     * @return an integer, K-th largest element in N arrays
     */
    class Node{
        int value;
        int row;
        int column;
        public Node(int row, int column, int value){
            this.value = value;
            this.row = row;
            this.column = column;
        }
    }

    public int KthInArrays(int[][] arrays, int k) {
        // Write your code here
        if(arrays == null || arrays.length == 0 || k <= 0){
            return -1;
        }

        for(int i = 0; i < arrays.length; i++){
            Arrays.sort(arrays[i]);
        }

        Queue<Node> queue = new PriorityQueue<Node>(arrays.length, new Comparator<Node>(){
            public int compare(Node a, Node b){
                return b.value - a.value;
            }
        });

        for(int i = 0; i < arrays.length; i++){
            if(arrays[i].length > 0){
                queue.offer(new Node(i, arrays[i].length - 1, arrays[i][arrays[i].length - 1]));
            }
        }

        for(int i = 0; i < k; i++){
            Node temp = queue.poll();
            if(i == k - 1){
                return temp.value;
            }
            if(temp.column > 0){
                queue.offer(new Node(temp.row, temp.column - 1, arrays[temp.row][temp.column - 1]));
            }
        }
        return -1;
    }
}


