Find the Connected Component in the Undirected Graph
Find the Connected Component in the directed Graph
/*这两道题是同样的方法，但是区别是，第二题不能用BFS，
第一题可以根据一个点reach到所有的连着的点，第二题因为有方向，不能reach到反方向的*/
/*class UndirectedGraphNode {
    int label;
    ArrayList<UndirectedGraphNode> neighbors;
    UndirectedGraphNode(int x) {
        label = x; neighbors = new ArrayList<UndirectedGraphNode>();
    }
}*/
/**
 * Definition for Undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */

//Algorithm 1. bfs 
public class Solution {
    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        if(nodes == null || nodes.size() == 0)
        {
            return results;
        }
        Set<UndirectedGraphNode> visited = new HashSet<UndirectedGraphNode>();
        //bfs on each node to get all the connected components
        for(UndirectedGraphNode node : nodes)   
        {
            if(!visited.contains(node))
            {
                bfs(node, visited, results);
            }
        }
        return results;
    }
    private void bfs(UndirectedGraphNode node, 
                    Set<UndirectedGraphNode> visited,
                    List<List<Integer>> results)
    {
        ArrayList<Integer> comp = new ArrayList<Integer>();
        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        queue.offer(node);
        visited.add(node);
        comp.add(node.label);
        
        while(!queue.isEmpty())
        {
            UndirectedGraphNode curr = queue.poll();
            for(UndirectedGraphNode neighbor : curr.neighbors)
            {
                if(!visited.contains(neighbor))
                {
                    queue.offer(neighbor);
                    visited.add(neighbor);
                    comp.add(neighbor.label);
                }
            }
        }
        Collections.sort(comp);
        results.add(comp);
    }
}


//Algorithm 2. Union Find
class solution {

    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {
        HashMap<Integer, Integer> fathers = new HashMap<>();
        //初始化，自己是自己的爸爸
        for (UndirectedGraphNode node : nodes) {
            fathers.put(node.label, node.label);
        }

        for (UndirectedGraphNode node : nodes) {
            int fax = find(fathers, node.label);//找到当前点的node
            for (UndirectedGraphNode neighbor : node.neighbors) {
                int fay = find(fathers, neighbor.label);//找到link的点得father
                if (fax != fay) {
                    fathers.put(fay, fax);//如果两个点的father不同，就union这两个点
                }
            }
        }

        HashMap<Integer, ArrayList<Integer>> ans = new HashMap<>();

        for (Map.Entry<Integer, Integer> entry : fathers.entrySet()) {
            int fa = find(fathers, entry.getKey());
            if (!ans.containsKey(fa)) {
                ans.put(fa, new ArrayList<>());
            }
            ans.get(fa).add(entry.getKey());
        }
        
        List<List<Integer>> res = new ArrayList<>();
        for (List<Integer> v : ans.values()) {
            Collections.sort(v);
            res.add(v);
        }
        return res;
        
    }
    public int find(HashMap<Integer, Integer> fathers, int label) {
        int fa = fathers.get(label);
        while (fa != fathers.get(fa)) {
            fa = fathers.get(fa);
        }
        return fa;
    }
}

Number of Islands
//1. BFS
class node {
    int x;
    int y;
    node(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    public int numIslands(boolean[][] grid) {
        int islands = 0;

        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return islands;
        }

        int m = grid.length;
        int n = grid[0].length;

        for (int i = 0; i < m; i++) {
            for (int j =0; j < n; j++) {
                if (grid[i][j]) {
                    BFS(grid, i, j);
                    islands++;
                }
            }
        }
        return islands;
    }

    public void BFS(boolean[][] grid, int x, int y) {
        int[] dx = new int[]{0, 0, 1, -1};
        int[] dy = new int[]{1, -1, 0, 0};

        Queue<node> queue = new LinkedList<>();

        queue.offer(new node(x, y));
        grid[x][y] = false;

        while (!queue.isEmpty()) {
            node temp = queue.poll();
            for (int i = 0; i < 4; i++) {
                node neighbers = new node(temp.x + dx[i], temp.y + dy[i]);
                if(!inBound(neighbers, grid))
                    continue;
                if(grid[neighbers.x][neighbers.y]) {
                    queue.offer(neighbers);
                    grid[neighbers.x][neighbers.y] = false;
                }
            }
        }
    }

    public boolean inBound(node neighbers, boolean[][] grid) {
        return neighbers.x >= 0 && neighbers.x < grid.length && neighbers.y >= 0 && neighbers.y < grid[0].length;
    }
}

2. Union find
class UnionFind { 

    private int[] father = null;
    private int count;

    private int find(int x) {
        if (father[x] == x) {
            return x;
        }
        return father[x] = find(father[x]);
    }

    public UnionFind(int n) {
        // initialize your data structure here.
        father = new int[n];
        for (int i = 0; i < n; ++i) {
            father[i] = i;
        }
    }

    public void connect(int a, int b) {
        // Write your code here
        int root_a = find(a);
        int root_b = find(b);
        if (root_a != root_b) {
            father[root_a] = root_b;
            count --;
        }
    }
        
    public int query() {
        // Write your code here
        return count;
    }
    
    public void set_count(int total) {
        count = total;
    }
}

public class Solution {
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    public int numIslands(boolean[][] grid) {
        int n = grid.length;
        if (n == 0)
            return 0;
        int m = grid[0].length;
        if (m == 0)
            return 0;
        UnionFind union_find = new UnionFind(n * m);
        
        int total = 0;
        for(int i = 0;i < grid.length; ++i)
            for(int j = 0;j < grid[0].length; ++j)
                //统计所有有1的总数，可以union的话就逐个减去
                if (grid[i][j])
                    total ++;
    
        union_find.set_count(total);
        for(int i = 0;i < grid.length; ++i)
            for(int j = 0;j < grid[0].length; ++j)
            if (grid[i][j]) {
                if (i > 0 && grid[i - 1][j]) {
                    union_find.connect(i * m + j, (i - 1) * m + j);
                }
                if (i <  n - 1 && grid[i + 1][j]) {
                    union_find.connect(i * m + j, (i + 1) * m + j);
                }
                if (j > 0 && grid[i][j - 1]) {
                    union_find.connect(i * m + j, i * m + j - 1);
                }
                if (j < m - 1 && grid[i][j + 1]) {
                    union_find.connect(i * m + j, i * m + j + 1);
                }
            }
        return union_find.query();
    }
}
3. DFS(不推荐)
public class Solution {
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    private int m, n;
    public void dfs(boolean[][] grid, int i, int j) {
        if (i < 0 || i >= m || j < 0 || j >= n) return;
        
        if (grid[i][j]) {
            grid[i][j] = false;
            dfs(grid, i - 1, j);
            dfs(grid, i + 1, j);
            dfs(grid, i, j - 1);
            dfs(grid, i, j + 1);
        }
        return;
    }

    public int numIslands(boolean[][] grid) {
        // Write your code here
        m = grid.length;
        if (m == 0) return 0;
        n = grid[0].length;
        if (n == 0) return 0;
        
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!grid[i][j]) 
                    continue;
                ans++;
                dfs(grid, i, j);
            }
        }
        return ans;
    }
}

434. Number of Islands II
/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */

public class Solution {
    
    int[] dx = {0, 0, 1, -1};
    int[] dy = {1, -1, 0, 0};
    public List<Integer> numIslands2(int n, int m, Point[] operators) {
        HashMap<Integer, Integer> fathers = new HashMap<>();
        List<Integer> ans = new ArrayList<>();
        int count = 0;
        if (operators == null)
            return ans;
        for (Point p : operators) {
            count++;
            int idx = twod2oned(p.x, p.y, n, m);
            fathers.put(idx, idx);
            for (int i = 0; i < 4; i++) {
                int nx = p.x + dx[i];
                int ny = p.y + dy[i];
                if (nx < 0 || nx >= n || ny < 0 || ny >= m)
                    continue;
                int neighbor = twod2oned(nx, ny, n, m);
                if (fathers.containsKey(neighbor)) {
                    int neighborGroup = find(fathers, neighbor);
                    if (neighborGroup != idx) {
                        fathers.put(neighborGroup, idx);
                        count--;
                    }
                }
            }
            ans.add(count);
        }
        return ans;
    }
    private int find(HashMap<Integer, Integer> fathers, int x) {
        int fa = fathers.get(x);
        while (fa != fathers.get(fa)) {
            fa = fathers.get(fa);
        }
        return fa;
    }
    private int twod2oned(int i, int j, int n, int m) {
        return i * m + j;
    }
}

178. Graph Valid Tree
//这里运用了路径压缩算法，可以把寻找父节点的时间复杂度平摊为O(1)， 之前的是O(N)
//union复杂度为O(1)
//总的空间复杂度为O(N),时间复杂度大致为O(1)
class UnionFind {
    HashMap<Integer, Integer> fathers = new HashMap<>();
    UnionFind(int n){
        for (int i = 0; i < n; i++) {
            fathers.put(i, i);
        }
    }

    public int CompressFind (int x) {
        int parent = fathers.get(x);//x的父亲节点
        while (parent != fathers.get(parent)) {
            parent = fathers.get(parent);
        }

        int fa = fathers.get(x);
        while (fa != fathers.get(fa)) {
            fathers.put(fa, parent);//Comparess path and set all node's parent as the toppest node
            fa = fathers.get(fa);
        }
        return parent;
    }

    public void Union (int x, int y) {
        int fa_x = CompressFind(x);
        int fa_y = CompressFind(y);

        if(fa_x != fa_y) {
            fathers.put(fa_x, fa_y);
        }
    }
}
public class Solution {
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    public boolean validTree(int n, int[][] edges) {
        if (n - 1 != edges.length) {//edge case should consider the tree's structure
            return false;
        }
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < edges.length; i++) {
            if (uf.CompressFind(edges[i][0]) == uf.CompressFind(edges[i][1])) {
                return false;
            }
            uf.Union(edges[i][0], edges[i][1]);
        }
        return true;
    }
}
