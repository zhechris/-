Find the Connected Component in the Undirected Graph
Find the Connected Component in the directed Graph
/*这两道题是同样的方法，但是区别是，第二题不能用BFS，
第一题可以根据一个点reach到所有的连着的点，第二题因为有方向，不能reach到反方向的*/
/*class UndirectedGraphNode {
    int label;
    ArrayList<UndirectedGraphNode> neighbors;
    UndirectedGraphNode(int x) {
        label = x; neighbors = new ArrayList<UndirectedGraphNode>();
    }
}*/
/**
 * Definition for Undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */

//Algorithm 1. bfs 
public class Solution {
    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        if(nodes == null || nodes.size() == 0)
        {
            return results;
        }
        Set<UndirectedGraphNode> visited = new HashSet<UndirectedGraphNode>();
        //bfs on each node to get all the connected components
        for(UndirectedGraphNode node : nodes)   
        {
            if(!visited.contains(node))
            {
                bfs(node, visited, results);
            }
        }
        return results;
    }
    private void bfs(UndirectedGraphNode node, 
                    Set<UndirectedGraphNode> visited,
                    List<List<Integer>> results)
    {
        ArrayList<Integer> comp = new ArrayList<Integer>();
        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        queue.offer(node);
        visited.add(node);
        comp.add(node.label);
        
        while(!queue.isEmpty())
        {
            UndirectedGraphNode curr = queue.poll();
            for(UndirectedGraphNode neighbor : curr.neighbors)
            {
                if(!visited.contains(neighbor))
                {
                    queue.offer(neighbor);
                    visited.add(neighbor);
                    comp.add(neighbor.label);
                }
            }
        }
        Collections.sort(comp);
        results.add(comp);
    }
}


//Algorithm 2. Union Find
class solution {

    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {
        HashMap<Integer, Integer> fathers = new HashMap<>();
        //初始化，自己是自己的爸爸
        for (UndirectedGraphNode node : nodes) {
            fathers.put(node.label, node.label);
        }

        for (UndirectedGraphNode node : nodes) {
            int fax = find(fathers, node.label);//找到当前点的node
            for (UndirectedGraphNode neighbor : node.neighbors) {
                int fay = find(fathers, neighbor.label);//找到link的点得father
                if (fax != fay) {
                    fathers.put(fay, fax);//如果两个点的father不同，就union这两个点
                }
            }
        }

        HashMap<Integer, ArrayList<Integer>> ans = new HashMap<>();

        for (Map.Entry<Integer, Integer> entry : fathers.entrySet()) {
            int fa = find(fathers, entry.getKey());
            if (!ans.containsKey(fa)) {
                ans.put(fa, new ArrayList<>());
            }
            ans.get(fa).add(entry.getKey());
        }
        
        List<List<Integer>> res = new ArrayList<>();
        for (List<Integer> v : ans.values()) {
            Collections.sort(v);
            res.add(v);
        }
        return res;
        
    }
    public int find(HashMap<Integer, Integer> fathers, int label) {
        int fa = fathers.get(label);
        while (fa != fathers.get(fa)) {
            fa = fathers.get(fa);
        }
        return fa;
    }
}

Number of Islands
//1. BFS
class node {
    int x;
    int y;
    node(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    public int numIslands(boolean[][] grid) {
        int islands = 0;

        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return islands;
        }

        int m = grid.length;
        int n = grid[0].length;

        for (int i = 0; i < m; i++) {
            for (int j =0; j < n; j++) {
                if (grid[i][j]) {
                    BFS(grid, i, j);
                    islands++;
                }
            }
        }
        return islands;
    }

    public void BFS(boolean[][] grid, int x, int y) {
        int[] dx = new int[]{0, 0, 1, -1};
        int[] dy = new int[]{1, -1, 0, 0};

        Queue<node> queue = new LinkedList<>();

        queue.offer(new node(x, y));
        grid[x][y] = false;

        while (!queue.isEmpty()) {
            node temp = queue.poll();
            for (int i = 0; i < 4; i++) {
                node neighbers = new node(temp.x + dx[i], temp.y + dy[i]);
                if(!inBound(neighbers, grid))
                    continue;
                if(grid[neighbers.x][neighbers.y]) {
                    queue.offer(neighbers);
                    grid[neighbers.x][neighbers.y] = false;
                }
            }
        }
    }

    public boolean inBound(node neighbers, boolean[][] grid) {
        return neighbers.x >= 0 && neighbers.x < grid.length && neighbers.y >= 0 && neighbers.y < grid[0].length;
    }
}

2. Union find
