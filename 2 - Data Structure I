Union Find
Find the Connected Component in the Undirected Graph
Find the Connected Component in the directed Graph
/*这两道题是同样的方法，但是区别是，第二题不能用BFS，
第一题可以根据一个点reach到所有的连着的点，第二题因为有方向，不能reach到反方向的*/
/*class UndirectedGraphNode {
    int label;
    ArrayList<UndirectedGraphNode> neighbors;
    UndirectedGraphNode(int x) {
        label = x; neighbors = new ArrayList<UndirectedGraphNode>();
    }
}*/
/**
 * Definition for Undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */

//Algorithm 1. bfs 
public class Solution {
    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        if(nodes == null || nodes.size() == 0)
        {
            return results;
        }
        Set<UndirectedGraphNode> visited = new HashSet<UndirectedGraphNode>();
        //bfs on each node to get all the connected components
        for(UndirectedGraphNode node : nodes)   
        {
            if(!visited.contains(node))
            {
                bfs(node, visited, results);
            }
        }
        return results;
    }
    private void bfs(UndirectedGraphNode node, 
                    Set<UndirectedGraphNode> visited,
                    List<List<Integer>> results)
    {
        ArrayList<Integer> comp = new ArrayList<Integer>();
        Queue<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        queue.offer(node);
        visited.add(node);
        comp.add(node.label);
        
        while(!queue.isEmpty())
        {
            UndirectedGraphNode curr = queue.poll();
            for(UndirectedGraphNode neighbor : curr.neighbors)
            {
                if(!visited.contains(neighbor))
                {
                    queue.offer(neighbor);
                    visited.add(neighbor);
                    comp.add(neighbor.label);
                }
            }
        }
        Collections.sort(comp);
        results.add(comp);
    }
}


//Algorithm 2. Union Find
class solution {

    public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes) {
        HashMap<Integer, Integer> fathers = new HashMap<>();
        //初始化，自己是自己的爸爸
        for (UndirectedGraphNode node : nodes) {
            fathers.put(node.label, node.label);
        }

        for (UndirectedGraphNode node : nodes) {
            int fax = find(fathers, node.label);//找到当前点的node
            for (UndirectedGraphNode neighbor : node.neighbors) {
                int fay = find(fathers, neighbor.label);//找到link的点得father
                if (fax != fay) {
                    fathers.put(fay, fax);//如果两个点的father不同，就union这两个点
                }
            }
        }

        HashMap<Integer, ArrayList<Integer>> ans = new HashMap<>();

        for (Map.Entry<Integer, Integer> entry : fathers.entrySet()) {
            int fa = find(fathers, entry.getKey());
            if (!ans.containsKey(fa)) {
                ans.put(fa, new ArrayList<>());
            }
            ans.get(fa).add(entry.getKey());
        }
        
        List<List<Integer>> res = new ArrayList<>();
        for (List<Integer> v : ans.values()) {
            Collections.sort(v);
            res.add(v);
        }
        return res;
        
    }
    public int find(HashMap<Integer, Integer> fathers, int label) {
        int fa = fathers.get(label);
        while (fa != fathers.get(fa)) {
            fa = fathers.get(fa);
        }
        return fa;
    }
}

Number of Islands
//1. BFS
class node {
    int x;
    int y;
    node(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    public int numIslands(boolean[][] grid) {
        int islands = 0;

        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return islands;
        }

        int m = grid.length;
        int n = grid[0].length;

        for (int i = 0; i < m; i++) {
            for (int j =0; j < n; j++) {
                if (grid[i][j]) {
                    BFS(grid, i, j);
                    islands++;
                }
            }
        }
        return islands;
    }

    public void BFS(boolean[][] grid, int x, int y) {
        int[] dx = new int[]{0, 0, 1, -1};
        int[] dy = new int[]{1, -1, 0, 0};

        Queue<node> queue = new LinkedList<>();

        queue.offer(new node(x, y));
        grid[x][y] = false;

        while (!queue.isEmpty()) {
            node temp = queue.poll();
            for (int i = 0; i < 4; i++) {
                node neighbers = new node(temp.x + dx[i], temp.y + dy[i]);
                if(!inBound(neighbers, grid))
                    continue;
                if(grid[neighbers.x][neighbers.y]) {
                    queue.offer(neighbers);
                    grid[neighbers.x][neighbers.y] = false;
                }
            }
        }
    }

    public boolean inBound(node neighbers, boolean[][] grid) {
        return neighbers.x >= 0 && neighbers.x < grid.length && neighbers.y >= 0 && neighbers.y < grid[0].length;
    }
}

2. Union find
class UnionFind { 

    private int[] father = null;
    private int count;

    private int find(int x) {
        if (father[x] == x) {
            return x;
        }
        return father[x] = find(father[x]);
    }

    public UnionFind(int n) {
        // initialize your data structure here.
        father = new int[n];
        for (int i = 0; i < n; ++i) {
            father[i] = i;
        }
    }

    public void connect(int a, int b) {
        // Write your code here
        int root_a = find(a);
        int root_b = find(b);
        if (root_a != root_b) {
            father[root_a] = root_b;
            count --;
        }
    }
        
    public int query() {
        // Write your code here
        return count;
    }
    
    public void set_count(int total) {
        count = total;
    }
}

public class Solution {
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    public int numIslands(boolean[][] grid) {
        int n = grid.length;
        if (n == 0)
            return 0;
        int m = grid[0].length;
        if (m == 0)
            return 0;
        UnionFind union_find = new UnionFind(n * m);
        
        int total = 0;
        for(int i = 0;i < grid.length; ++i)
            for(int j = 0;j < grid[0].length; ++j)
                //统计所有有1的总数，可以union的话就逐个减去
                if (grid[i][j])
                    total ++;
    
        union_find.set_count(total);
        for(int i = 0;i < grid.length; ++i)
            for(int j = 0;j < grid[0].length; ++j)
            if (grid[i][j]) {
                if (i > 0 && grid[i - 1][j]) {
                    union_find.connect(i * m + j, (i - 1) * m + j);
                }
                if (i <  n - 1 && grid[i + 1][j]) {
                    union_find.connect(i * m + j, (i + 1) * m + j);
                }
                if (j > 0 && grid[i][j - 1]) {
                    union_find.connect(i * m + j, i * m + j - 1);
                }
                if (j < m - 1 && grid[i][j + 1]) {
                    union_find.connect(i * m + j, i * m + j + 1);
                }
            }
        return union_find.query();
    }
}
3. DFS(不推荐)
public class Solution {
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    private int m, n;
    public void dfs(boolean[][] grid, int i, int j) {
        if (i < 0 || i >= m || j < 0 || j >= n) return;
        
        if (grid[i][j]) {
            grid[i][j] = false;
            dfs(grid, i - 1, j);
            dfs(grid, i + 1, j);
            dfs(grid, i, j - 1);
            dfs(grid, i, j + 1);
        }
        return;
    }

    public int numIslands(boolean[][] grid) {
        // Write your code here
        m = grid.length;
        if (m == 0) return 0;
        n = grid[0].length;
        if (n == 0) return 0;
        
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!grid[i][j]) 
                    continue;
                ans++;
                dfs(grid, i, j);
            }
        }
        return ans;
    }
}

434. Number of Islands II
/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */

public class Solution {
    
    int[] dx = {0, 0, 1, -1};
    int[] dy = {1, -1, 0, 0};
    public List<Integer> numIslands2(int n, int m, Point[] operators) {
        HashMap<Integer, Integer> fathers = new HashMap<>();
        List<Integer> ans = new ArrayList<>();
        int count = 0;
        if (operators == null)
            return ans;
        for (Point p : operators) {
            count++;
            int idx = twod2oned(p.x, p.y, n, m);
            fathers.put(idx, idx);
            for (int i = 0; i < 4; i++) {
                int nx = p.x + dx[i];
                int ny = p.y + dy[i];
                if (nx < 0 || nx >= n || ny < 0 || ny >= m)
                    continue;
                int neighbor = twod2oned(nx, ny, n, m);
                if (fathers.containsKey(neighbor)) {
                    int neighborGroup = find(fathers, neighbor);
                    if (neighborGroup != idx) {
                        fathers.put(neighborGroup, idx);
                        count--;
                    }
                }
            }
            ans.add(count);
        }
        return ans;
    }
    private int find(HashMap<Integer, Integer> fathers, int x) {
        int fa = fathers.get(x);
        while (fa != fathers.get(fa)) {
            fa = fathers.get(fa);
        }
        return fa;
    }
    private int twod2oned(int i, int j, int n, int m) {
        return i * m + j;
    }
}

178. Graph Valid Tree
//这里运用了路径压缩算法，可以把寻找父节点的时间复杂度平摊为O(1)， 之前的是O(N)
//union复杂度为O(1)
//总的空间复杂度为O(N),时间复杂度大致为O(1)
class UnionFind {
    HashMap<Integer, Integer> fathers = new HashMap<>();
    UnionFind(int n){
        for (int i = 0; i < n; i++) {
            fathers.put(i, i);
        }
    }

    public int CompressFind (int x) {
        int parent = fathers.get(x);//x的父亲节点
        while (parent != fathers.get(parent)) {
            parent = fathers.get(parent);
        }

        int fa = fathers.get(x);
        while (fa != fathers.get(fa)) {
            fathers.put(fa, parent);//Comparess path and set all node's parent as the toppest node
            fa = fathers.get(fa);
        }
        return parent;
    }

    public void Union (int x, int y) {
        int fa_x = CompressFind(x);
        int fa_y = CompressFind(y);

        if(fa_x != fa_y) {
            fathers.put(fa_x, fa_y);
        }
    }
}
public class Solution {
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    public boolean validTree(int n, int[][] edges) {
        if (n - 1 != edges.length) {//edge case should consider the tree's structure
            return false;
        }
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < edges.length; i++) {
            if (uf.CompressFind(edges[i][0]) == uf.CompressFind(edges[i][1])) {
                return false;
            }
            uf.Union(edges[i][0], edges[i][1]);
        }
        return true;
    }
}
//这道题和别的题目不同之处在于union，需要每次都并入到最大集合中去
477. Surrounded Regions
class UnionFind {
    HashMap<Integer, Integer> fathers = new HashMap<>();
    
    UnionFind(int n) {
        for (int i = 0; i < n; i++) {
            fathers.put(i, i);
        }
    }
    
    public int CompressFind (int x) {
        int parent = fathers.get(x);
        while (parent != fathers.get(parent)) {
            parent = fathers.get(parent);
        }
        
        int fa = fathers.get(x);
        while (fa != fathers.get(fa)) {
            fathers.put(fa, parent);
            fa = fathers.get(fa);
        }
        return parent;
    }
    
    public void Union(int x, int y) {
        int fa_x = CompressFind(x);
        int fa_y = CompressFind(y);
        
        if (fa_x != fa_y) {
            fathers.put(Math.min(fa_x, fa_y), Math.max(fa_x, fa_y));//always并到大的union里面, guarantee father == total
        }
    }
    
}
public class Solution {
    /*
     * @param board: board a 2D board containing 'X' and 'O'
     * @return: nothing
     */
    public void surroundedRegions(char[][] board) {
        // write your code here
        if (board == null || board.length == 0 || board[0].length == 0){
            return;
        }
        int n = board.length;
        int m = board[0].length;
        int[] dx = new int[]{0, 0, 1, -1};
        int[] dy = new int[]{1, -1, 0, 0};
        
        int total = n * m;//total elements
        UnionFind uf = new UnionFind(total + 1);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++){
                if (board[i][j] == 'X')
                    continue;
                
                if (i == 0 || i == n - 1|| j == 0 || j == m - 1) {
                    uf.Union(i * m + j, total);//here is a trick, union all edges 
                } else {
                    for (int k = 0; k < 4; k++) {
                        int nx = i + dx[k];
                        int ny = j + dy[k];
                        if (board[nx][ny] == 'O'){
                            uf.Union(i * m + j, nx * m + ny);
                        }
                    }
                }
            }
        }
        
        for (int i = 1; i < n - 1; i++){
            for (int j = 1; j < m - 1; j++){
                if (board[i][j] == 'O' && uf.CompressFind(i * m + j) != total){
                    board[i][j] = 'X';
                }
            }
        }
    }
}

Trie
442. Implement Trie (Prefix Tree)
/*
Your Trie object will be instantiated and called as such:
Trie trie = new Trie();
trie.insert("lintcode");
trie.search("lint"); will return false
trie.startsWith("lint"); will return true
*/
/*
Your Trie object will be instantiated and called as such:
Trie trie = new Trie();
trie.insert("lintcode");
trie.search("lint"); will return false
trie.startsWith("lint"); will return true
*/
class TrieNode {
    // Initialize your data structure here.
    char c;
    HashMap<Character, TrieNode> children = new HashMap<Character, TrieNode>();
    boolean hasWord;
    
    public TrieNode(){
        c = ' ';
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode cur = root;
        HashMap<Character, TrieNode> curChildren = root.children;
        char[] wordArray = word.toCharArray();
        for(int i = 0; i < wordArray.length; i++){
            char wc = wordArray[i];
            if(curChildren.containsKey(wc)){
                cur = curChildren.get(wc);
            } else {
                TrieNode newNode = new TrieNode();//wc as prefix's children
                curChildren.put(wc, newNode);
                cur = newNode;
            }
            curChildren = cur.children;
            if(i == wordArray.length - 1){
                cur.hasWord= true;
            }
        }
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        if(searchWordNodePos(word) == null){
            return false;
        } else if(searchWordNodePos(word).hasWord) 
            return true;
          else 
            return false;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        if(searchWordNodePos(prefix) == null){
            return false;
        } else 
            return true;
    }
    
    public TrieNode searchWordNodePos(String s){
        HashMap<Character, TrieNode> children = root.children;
        TrieNode cur = null;
        char[] sArray = s.toCharArray();
        for(int i = 0; i < sArray.length; i++){
            char c = sArray[i];
            if(children.containsKey(c)){
                cur = children.get(c);
                children = cur.children;
            } else{
                return null;
            }
        }
        return cur;
    }
}

132. Word Search II
class TrieNode {
    String word;
    HashMap<Character, TrieNode> children;
    public TrieNode() {
        word = null;
        children = new HashMap<Character, TrieNode>();
    }
};


class TrieTree{
    TrieNode root;
    
    public TrieTree(TrieNode TrieNode) {
        root = TrieNode;
    }
    
    public void insert(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            if (!node.children.containsKey(word.charAt(i))) {
                node.children.put(word.charAt(i), new TrieNode());
            }
            node = node.children.get(word.charAt(i));
        }
        node.word = word;
    }
};

public class Solution {
    /**
     * @param board: A list of lists of character
     * @param words: A list of string
     * @return: A list of string
     */
    public int[] dx = {1, 0, -1, 0};
    public int[] dy = {0, 1, 0, -1};
    
    public void search(char[][] board,
                       int x,
                       int y,
                       TrieNode root,
                       List<String> results) {
        if (!root.children.containsKey(board[x][y])) {
            return;
        }
        
        TrieNode child = root.children.get(board[x][y]);
        
        if (child.word != null) {
            if (!results.contains(child.word)) {
                results.add(child.word);
            }
        }
        
        char tmp = board[x][y];
        board[x][y] = 0;  // mark board[x][y] as used
        
        for (int i = 0; i < 4; i++) {
            if (!isValid(board, x + dx[i], y + dy[i])) {
                continue;
            }
            search(board, x + dx[i], y + dy[i], child, results);
        }
        
        board[x][y] = tmp;  // revert the mark
    }
    
    private boolean isValid(char[][] board, int x, int y) {
        if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) {
            return false;
        }
        
        return board[x][y] != 0;
    }
    
    public List<String> wordSearchII(char[][] board, List<String> words) {
        List<String> results = new ArrayList<String>();
        
        TrieTree tree = new TrieTree(new TrieNode());
        for (String word : words){
            tree.insert(word);
        }
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                search(board, i, j, tree.root, results);
            }
        }
        
        return results;
    }
}
