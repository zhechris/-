1.滚动数组优化
解题思路，先用普通方法找出来状态方程， 之后%k， k为当前状态与前k个状态有关
可以将空间从O(N)优化成O(1)
392. House Robber
public class Solution {
    /**
     * @param A: An array of non-negative integers
     * @return: The maximum amount of money you can rob tonight
     */
    public long houseRobber(int[] A) {
        // write your code here
        int n = A.length;
        if(n == 0)
            return 0;
        long []res = new long[2];
        
        
        res[0] = 0;
        res[1] = A[0];
        for(int i = 2; i <= n; i++) {
            res[i % 2] = Math.max(res[(i-1) % 2], res[(i-2) % 2] + A[i-1]);
        }
        return res[n % 2];
    }
}

534. House Robber II
public class Solution {
    /**
     * @param nums: An array of non-negative integers.
     * @return: The maximum amount of money you can rob tonight
     */
    public int houseRobber2(int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0){
            return 0;
        }
        //将环断开，不取最后一个，取第一个
        int[] dp1 = new int[2];
        dp1[0] = 0;
        dp1[1] = nums[0];
        for(int i = 2; i <= nums.length; i++){
            if(i == nums.length){
                dp1[nums.length % 2] = dp1[(nums.length - 1) % 2];
                break;
            }
            dp1[i % 2] = Math.max(dp1[(i - 1) % 2], dp1[(i - 2) % 2] + nums[i - 1]);
        }
        
        //取最后一个，不取第一个
        int[] dp2 = new int[2];
        dp2[0] = 0;
        dp2[1] = 0;
        for(int i = 2; i <= nums.length; i++){
            dp2[i % 2] = Math.max(dp2[(i - 1) % 2], dp2[(i - 2) % 2] + nums[i - 1]);
        }
        
        return Math.max(dp2[nums.length % 2], dp1[nums.length % 2]);
    }
}

436. Maximal Square
public class Solution {
    /**
     * @param matrix: a matrix of 0 and 1
     * @return: an integer
     */
    public int maxSquare(int[][] matrix) {
        // write your code here
        int res = 0;
        if(matrix.length == 0 || matrix[0].length == 0){
            return res;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        
        for(int i = 0; i < m; i++){
            dp[i][0] = matrix[i][0];
            res = Math.max(res, dp[i][0]);
            for(int j = 1; j < n; j++){
                dp[i][j] = matrix[i][j];
                if(i > 0){
                    if(matrix[i][j] != 0){
                        dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])  ) + 1;
                    } else{
                        dp[i][j] = 0;
                    }
                }
                res = Math.max(res, dp[i][j]);
            }
        }
        return res*res;
    }
}
//滚动数组优化，但是只能优化行或者列，不然切换到下一行或者列的时候就会因为没保存而失效
public class Solution {
    /**
     * @param matrix: a matrix of 0 and 1
     * @return: an integer
     */
    public int maxSquare(int[][] matrix) {
        // write your code here
        int res = 0;
        if(matrix.length == 0 || matrix[0].length == 0){
            return res;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[2][n];
        
        for(int i = 0; i < m; i++){
            dp[i % 2][0] = matrix[i][0];
            res = Math.max(res, dp[i % 2][0]);
            for(int j = 1; j < n; j++){
                dp[i % 2][j] = matrix[i][j];
                if(i > 0){
                    if(matrix[i][j] != 0){
                        dp[i % 2][j] = Math.min(dp[(i - 1) % 2][j - 1], Math.min(dp[(i - 1) % 2][j], dp[i % 2][j - 1]) ) + 1;
                    } else{
                        dp[i % 2][j] = 0;
                    }
                } 
                res = Math.max(res, dp[i % 2][j]);
            }
        }
        return res*res;
    }
}
小技巧
网格类的题目
正方形用右下角作为定位角
长方形可以用左上角和右下角作为定位角

114. Unique Paths
public class Solution {
    /**
     * @param m: positive integer (1 <= m <= 100)
     * @param n: positive integer (1 <= n <= 100)
     * @return: An integer
     */
    public int uniquePaths(int m, int n) {
        // write your code here
        int res = 0;
        if(m <= 0 || n <= 0){
            return res;
        }
        int[][] dp = new int[2][n];
        
        for(int i = 0; i < m; i++){
            dp[i % 2][0] = 1;
        }
        for(int i = 0; i < n; i++){
            dp[0][i] = 1;
        }
        for(int i = 1; i < m; i++){
            for (int j = 1; j < n; j++){
                dp[i % 2][j] = dp[(i - 1) % 2][j] + dp[i % 2][j - 1];
            }
        }
        return dp[(m - 1) % 2][n - 1];
    }
}

110. Minimum Path Sum
public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: An integer, minimizes the sum of all numbers along its path
     */
    public int minPathSum(int[][] grid) {
        // write your code here
        if(grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        
        for(int i = 1; i < m; i++){
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }
        
        for(int i = 1; i < n; i++){
            dp[0][i] = dp[0][i - 1] + grid[0][i]; 
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        
        return dp[m - 1][n - 1];
    }
}

119. Edit Distance
public class Solution {
    /**
     * @param word1: A string
     * @param word2: A string
     * @return: The minimum number of steps.
     */
    public int minDistance(String word1, String word2) {
        // write your code here
        int n = word1.length();
        int m = word2.length();
        
        int[][] dp = new int[n+1][m+1];
        for(int i=0; i< m+1; i++){
            dp[0][i] = i; 
        }
        for(int i=0; i<n+1; i++){
            dp[i][0] = i;
        }
        
        
        for(int i = 1; i<n+1; i++){
            for(int j=1; j<m+1; j++){
                //如果相等，不再操作，step不变
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    //增删替中选一个成本最小的
                    dp[i][j] = 1 + Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
                }
            }
        }
        return dp[n][m];
    }
}

2.记忆化搜索
可以优化时间复杂度，已经搜索过的存起来，下次不需要重复搜索
76. Longest Increasing Subsequence
public class Solution {
    /**
     * @param nums: An integer array
     * @return: The length of LIS (longest increasing subsequence)
     */
    public int longestIncreasingSubsequence(int[] nums) {
        // write your code here
        int[] dp = new int[nums.length];
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        for (int i = 0; i < nums.length; i++){
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    dp[i] = dp[i] > dp[j] + 1 ? dp[i] : dp[j] + 1;
                } 
            }
        }
        //按照从小到大的顺序排列，最后一个就是最大值
        Arrays.sort(dp);
        return dp[nums.length - 1];
    }
}

397. Longest Continuous Increasing Subsequence
public class Solution {
    /**
     * @param A: An array of Integer
     * @return: an integer
     */
    public int longestIncreasingContinuousSubsequence(int[] A) {
        // write your code here
        if (A.length == 0) {
            return 0;
        }
        
        int longest = 1;
        int[] memo = new int[A.length];
        memo[0] = 1;
        
        for (int i = 1; i < A.length; i++) {
            memo[i] = A[i - 1] > A[i] ? memo[i - 1] + 1 : 1;
            longest = Math.max(longest, memo[i]);
        }
        
        for (int i = 1; i < A.length; i++) {
            memo[i] = A[i - 1] < A[i] ? memo[i - 1] + 1 : 1;
            longest = Math.max(longest, memo[i]);
        }
        
        
        return longest;
    }
}

Longest Increasing Continuous subsequence II
class Solution {
    int[][] dp;
    int[][] flag;
    int M, N;

    int[] dx = new int[] {-1, 0, 1, 0};
    int[] dy = new int[] {0, -1, 0, 1};
    /**
     * @param A an integer matrix
     * @return  an integer
     */
    public int longestIncreasingContinuousSubsequenceII(int[][] A) {
        if (A == null || A.length == 0 || A[0].length == 0) {
            return 0;
        }
        M = A.length;
        N = A[0].length;
        dp = new int[M][N];
        flag = new int[M][N];

        int ans = 0;

        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                dp[i][j] = search(i, j, A);
                ans = Math.max(ans, dp[i][j]);
            }
        }

        return ans;
    }

    // Memorized search, recursive
    public int search(int x, int y, int[][] A) {
        if (flag[x][y] != 0) {
            return dp[x][y];
        }

        int ans = 1; // Initialize dp[x][y] = 1 if it's local min compare to 4 directions
        int nx, ny;
        for (int i = 0; i < dx.length; i++) {
            nx = x + dx[i];
            ny = y + dy[i];
            if (nx >=0 && nx < M && ny >= 0 && ny < N && (A[x][y] > A[nx][ny])) {
                ans = Math.max(ans, search(nx, ny, A) + 1);
            }
        }

        flag[x][y] = 1;
        dp[x][y] = ans;

        return ans;
    }
}

394. Coins in a Line
public class Solution {
    /**
     * @param n: An integer
     * @return: A boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int n) {
        // write your code here
        if(n <= 0){
            return false;
        }
        boolean[] dp = new boolean[n + 1];
        dp[0] = false;
        dp[1] = true;
        for(int i = 2; i < n + 1; i++){
            dp[i] = (!dp[i - 1] || !dp[i - 2]);
        }
        return dp[n];
    }
}

395. Coins in a Line II
public class Solution {
    /**
     * @param values: a vector of integers
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int[] values) {
        // write your code here
        int n = values.length;
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; ++i)
            sum[i] = sum[i -  1] + values[n - i];//剩余i个硬币的总和

        int[] dp = new int[n + 1];//剩余i个硬币能取到的最大值
        dp[1] = values[n - 1];
        for (int i = 2; i <= n; ++i)
            dp[i] = Math.max(sum[i] - dp[i - 1], sum[i] - dp[i - 2]);
            
        return dp[n]  > sum[n] / 2;
    }
}

Coins in a Line III
/**
 * Approach: DP
 * 在 Coins in a Line II 上面的进一步加大难度。
 * 但是主要解体思路仍然与 II 相同。
 * 仍然要使得每一次取完之后，对手取的都是较差的情况。使得对手拿到的硬币总价值最小。
 * 因为每次取可以在 左/右 任意一边取一个值。故我们需要知道数组中每一段之和是多少。
 * 然后对每次操作进行分析，得出 状态转移方程（和 II 几乎一样）
 *
 * 游戏局面 (State):
 * dp[i][j] 剩下 i~j 段的硬币时，可以取得的最大值（i为左端位置，j为右端位置）
 * 玩家决策 (Function):
 * 因为硬币总价值一定，为了保证 先手最大，保证取完后对手能取到的最小即可。
 * (死命想法办法坑对方即可)
 * dp[i][j] = sum[i][j] - Math.min(dp[i+1][j], dp[i][j-1]);
 * 注意：当 i==j 时，我们只能取到 values[i].
 * 游戏终止 (Initialize)：
 * 当唯一剩下的一枚硬币被取走之后，游戏结束。
 * 故当 i==j 时，dp[i][j] = values[i];
 *
 * 实际的流程就是一个 填矩阵 的过程。
 * 我们发现 dp[i][j] 依赖与 dp[i+1][j] 和 dp[i][j-1] 这两个状态。
 * 并且 左端位置i 永远不可能大于 右端位置j
 * 因此我们要填的其实是这个矩阵的 右上部分 的一个三角形。
 * 而初始化的 base 就是这个矩阵的 对角线。
 * 按照 从下到上，从左到右 的顺序进行递推，得到最终结果：
 * 矩阵的 右上角 (dp[0][n-1])
 */
public class Solution {
    /**
     * @param values: a vector of integers
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int[] values) {
        if (values == null || values.length <= 2) {
            return true;
        }

        int n = values.length;
        int[][] sum = new int[n][n];
        int[][] dp = new int[n][n];
        // 计算出每一段区间[i...j]的价值之和
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (i == j) {
                    sum[i][j] = values[i];
                } else {
                    sum[i][j] = sum[i][j - 1] + values[j];
                }
            }
        }

        // Initialize and Function
        // bottom to top
        for (int i = n - 1; i >= 0; i--) {
            // left to right
            for (int j = i; j < n; j++) {
                if (i == j) {
                    dp[i][j] = values[i];
                } else {
                    dp[i][j] = sum[i][j] - Math.min(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[0][n - 1] > sum[0][n - 1] / 2;
    }
}
