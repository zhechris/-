364. Trapping Rain Water II
/*本题是Trapping Rain Water的follow up，I中是循环两遍记录每个位置左右两侧的最高水柱，
而II在二维的灌水情境中，则需要从外围向内包围查找，记录最小的柱高，也就是木桶原理，最矮的柱子决定了灌水的高度。
从最外围一圈向内部遍历，记录包围“墙”的最小柱高，可以利用min-heap（PriorityQueue）
记录遍历过的点visited[][]
对于min-heap的堆顶元素，假设高度h，查找其周围4个方向上未曾访问过的点
如果比h高，则说明不能装水，但是提高了“围墙”最低高度，因此将其加入min-heap中，设置元素被访问
如果比h矮，则说明可以向其中灌水，且灌水高度就是h - h'，其中h'是当前访问的柱子高度，
同样的，要将其加入min heap中，（且该元素高度记为灌水后的高度，也就是h，可以设想为一个虚拟的水位高度），设置元素被访问
此外，为了方便，可以定义一个Cell类，包含其坐标x,y，以及高度h，并定义其Comparator规则（也可以在初始化PriorityQueue的时候定义）。*/
public class Solution {
    /**
     * @param heights: a matrix of integers
     * @return: an integer
     */
    class cell{
        int x, y, h;
        cell(int x, int y, int h){
            this.x = x;
            this.y = y;
            this.h = h;
        }
    }
    public int trapRainWater(int[][] heights) {
        // write your code here
        if(heights == null || heights.length == 0 || heights[0].length == 0){
            return 0;
        }
        PriorityQueue<cell> heap = new PriorityQueue<>(new Comparator<cell>(){
            public int compare(cell a, cell b){
                return a.h - b.h;
            }
            
        });
        int m = heights.length;//row
        int n = heights[0].length;//col 
        int[][] visited = new int[m][n];
        //add outer, from outside to add water
        for(int i = 0; i < m; i++){
            heap.offer(new cell(i, 0, heights[i][0]));
            heap.offer(new cell(i, n - 1, heights[i][n - 1]));
            visited[i][0] = 1;
            visited[i][n - 1] = 1;
        }
        for(int i = 1; i < n; i++){
            heap.offer(new cell(0, i, heights[0][i]));
            heap.offer(new cell(m - 1, i, heights[m - 1][i]));
            visited[0][i] = 1;
            visited[m - 1][i] = 1;
        }
        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};
        int water = 0;
        while(!heap.isEmpty()){
            cell now = heap.poll();
            for(int i = 0; i < 4; i++){
                int x = now.x + dx[i];
                int y = now.y + dy[i];
                if(x < m && y < n && x >= 0 && y >=0 && visited[x][y] != 1){
                    heap.offer(new cell(x, y, Math.max(now.h, heights[x][y])));
                    water += Math.max(0, now.h - heights[x][y]);
                    visited[x][y] = 1;
                }
            }
        }
        return water;
    }
}

130. Heapify
public class Solution {
    /*
     * @param A: Given an integer array
     * @return: nothing
     */
    public void siftdown(int[] A, int father){
        while (father * 2 + 1 < A.length) {
            int son = father * 2 + 1;
            if (father * 2 + 2 < A.length && A[son] > A[father * 2 + 2])
                son = father * 2 + 2;
            if (A[son] >= A[father])
                break;
            
            int temp = A[son];
            A[son] = A[father];
            A[father] = temp;
            father = son;//该分支下面的分支都调整一下
        }
    }
    public void heapify(int[] A) {
        // write your code here
        for(int i = (A.length - 1) / 2; i >=0; i--){
            siftdown(A, i);
        }
    }
}

81. Find Median from Data Stream
/*分为两个堆，一个最大堆，一个最小堆，来一个数判断放在那个堆里面，从最大堆里面peek*/
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        int[] res = new int[nums.length];
        if(nums == null || nums.length == 0){
            return res;
        }
        
        PriorityQueue<Integer> minheap = new PriorityQueue<>();
        PriorityQueue<Integer> maxheap = new PriorityQueue<>(new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                return b - a;
            }
        });
        
        for(int i = 0; i < nums.length; i++){
            maxheap.offer(nums[i]);
            if(maxheap.size() >= minheap.size()){//等于放在这里是因为不管奇数还是偶数个，都可以从前面的堆里取到中位数
                minheap.offer(maxheap.poll());
            } 
            if(maxheap.size() < minheap.size()){
                maxheap.offer(minheap.poll());
            }
            res[i] = maxheap.peek();
        }
        return res;
    }
}

360. Sliding Window Median
public class Solution {
  public ArrayList<Integer> medianSlidingWindow(int[] nums, int k) {
    ArrayList<Integer> result = new ArrayList<Integer>();
    int length = nums.length;
    
    if (nums == null || length == 0 || length < k) {
      return result;
    }
    
    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(length);
    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(length, Collections.reverseOrder());
    
    int j = 0;
    int median = nums[0];
    //执行窗口的挪动，并且依次判断出去的元素是否应该出去
    for (int i = 0; i < nums.length; i++) {
      if (i >= k) {
        if (nums[j] > median) {
          minHeap.remove(nums[j]);//自带的remove时间复杂度是O(N),如果用hashheap可以到O(logN),因为不用for遍历查找了
        } else {
          maxHeap.remove(nums[j]);
        }
        j++;
      }
      
      maxHeap.offer(nums[i]);
      
      if (maxHeap.size() >= minHeap.size()) {
        minHeap.offer(maxHeap.poll());
      }
      
      if (minHeap.size() > maxHeap.size()) {
        maxHeap.offer(minHeap.poll());
      }

      
      if (i >= k - 1) {
        median = maxHeap.peek();
        result.add(median);
      }
    }
    
    return result;
  }
}

