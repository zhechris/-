75. Find Peak Element
//二分法，这道题在基础班见过
public class Solution {
    /*
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        // write your code here
        int n = A.length;
        int start = 1;
        int end = n - 2;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (A[mid] < A[mid - 1]) {
                end = mid;
            } else if (A[mid] < A[mid + 1]) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] > A[end]) {
            return start;
        } else {
            return end;
        }
    }
}
//需要注意的是，有的时候start和end的范围要注意一下，比如下面这个写法，也可以AC，但是换道题目可能就不行了
public class Solution {
    /*
     * @param A: An integers array.
     * @return: return any of peek positions.
     */
    public int findPeak(int[] A) {
        // write your code here
        int n = A.length;
        int start = 1;
        int end = n - 2;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (A[mid] < A[mid - 1]) {
                end = mid - 1;
            } else if (A[mid] < A[mid + 1]) {
                start = mid + 1;
            } else {
                return mid;
            }
        }
        return 0;
    }
}

390. Find Peak Element II
class Solution {
    /**
     * @param A: An integer matrix
     * @return: The index of the peak
     */
    //行操作中二分查找取最大值
    public List<Integer> findPeakII(int[][] A) {
        // write your code here
        int top = 1;
        int bottom = A.length - 2;
        int col = 0;
        List<Integer> res = new ArrayList<>();
        while (top <= bottom) {
            int mid = top + (bottom - top) / 2;
            col = findPeak(mid, A);
            if (A[mid][col] < A[mid - 1][col]) {
                bottom = mid - 1;
            } else if (A[mid][col] < A[mid + 1][col]) {
                top = mid + 1;
            } else {
                res.add(mid);
                res.add(col);
                break;
            }
        }
        return res;
    }
    //列操作中二分查找取最大值
    public int findPeak(int row, int[][] A) {
        int start = 1;
        int end = A[0].length - 1;
        while (start + 1 < end) {
            int m = start + (end - start) / 2;
            if (A[row][m] < A[row][m - 1]) {
                end = m;
            } else if (A[row][m] < A[row][m + 1]) {
                start = m;
            } else {
                end = m;
            }
        }
        if (A[row][start] > A[row][end]) {
            return start;
        } else {
            return end;
        }
    }
}

5. Kth Largest Element
//优先队列的方法，但是没有follow up
class Solution {
    /*
     * @param k : description of k
     * @param nums : array of nums
     * @return: description of return
     */
    public int kthLargestElement(int k, int[] nums) {
        // write your code here
        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                return b - a;
            }
        });
        for (int i = 0; i < nums.length; i++) {
            pq.offer(nums[i]);
        }
        
        for (int i = 0; i < k - 1; i++) {
            pq.poll();
        }
        return pq.peek();
    }
};

5. Kth Largest Element
class Solution {
    /*
     * @param k : description of k
     * @param nums : array of nums
     * @return: description of return
     */
    public int kthLargestElement(int k, int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0){
            return 0;
        }
        if(k <= 0){
            return 0;
        }
        return quickSelecthelper(nums, 0, nums.length - 1, nums.length - k + 1);
    }

    private int quickSelecthelper(int[] nums, int l, int r, int k) {
        //只存在一个元素
        if(l == r){
            return nums[l];
        }
        int position = quickSelect(nums, l , r);

        if (position + 1 == k) {
            return nums[position];
        } else if(position + 1 < k){
            return quickSelecthelper(nums, position + 1, r, k);
        } else{
            return quickSelecthelper(nums, l, position - 1, k);
        }

    }
    public int quickSelect(int[] nums, int l, int r){
        int left = l, right = r;
        int pivot = nums[l];
        while(left < right){
            while(left < right && nums[right] >= pivot){
                right--;
            }
            nums[left] = nums[right];
            while(left < right && nums[left] <= pivot){
                left++;
            }
            nums[right] = nums[left];
        }
        
        nums[left] = pivot;
        return left;
        
        /*
        这种换法有的test过不了，不知道为啥
        int left = l, right = r;
        int pivot = nums[l];
        while(left <= right){
            while(left <= right && nums[left] < pivot){
                left++;
            }
            while(left <= right && nums[right] >= pivot){
                right--;
            }
            if(left <= right){
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                left++;
                right--;
            }
        }
        return left;*/
    }
}


401. Kth Smallest Number in Sorted Matrix
//依旧是pq的解法
class node {
    int x;
    int y;
    int value;
    public node(int x, int y, int value){
        this.x = x;
        this.y = y;
        this.value = value;
    }
}
public class Solution {
    /**
     * @param matrix: a matrix of integers
     * @param k: An integer
     * @return: the kth smallest number in the matrix
     */
    public int kthSmallest(int[][] matrix, int k) {
        // write your code here
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return -1;
        }
        int res = 0;
        PriorityQueue<node> pq = new PriorityQueue<>(new Comparator<node>(){
            public int compare(node a, node b){
                return a.value - b.value;
            }
        });
        
        for (int i = 0; i < matrix.length; i++) {
            if (matrix[i].length > 0)
                pq.offer(new node(i, 0, matrix[i][0]));
        }
        
        while (!pq.isEmpty()) {
            node temp = pq.poll();
            if (k == 1) {
                return temp.value;
            }
            
            if (temp.y < matrix[0].length - 1) {
                pq.offer(new node(temp.x, temp.y + 1, matrix[temp.x][temp.y + 1]));
            }
            k--;
        }
        return -1;
    }
}

Kth Smallest In Two Sorted Arrays
//一个最基本的方法，遍历O(m + n)
class Solution{
	public int Kth(int[] a, int[] b, int k ){
		if (a.length < 0 && b.length < 0) {
			return -1;
		}

		int n = a.length;
		int m = b.length;

		int i = 0;
		int j = 0;
		int s = 0;
		int[] sorted = new int[m + n];
		while (i < n && j < m) {
			if (a[i] < b[j]) {
				sorted[s++] = a[i++];
			} else {
				sorted[s++] = b[j++];
			}
		} 
		while (i < m) {
			sorted[s++] = a[i++];
		}
		while (j < m) {
			sorted[s++] = b[j++];
		}
		return sorted[k - 1];
	}
}

138. Subarray Sum
//涉及到subarray之类的题目，一定要想到用map来扫描，下次探测发现相同的即可，还有一类题目，找相同的，可以用map存取相反的数目。
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public List<Integer> subarraySum(int[] nums) {
        // write your code here
        List<Integer> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        
        HashMap<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        map.put(0, -1);//First add sum = 0 into map, if sum = 0 show up again, indicates              
		      //that already find it.
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum)) {
                res.add(map.get(sum) + 1);//casue the subarray begin at next int
                res.add(i);
            } else {
                map.put(sum, i);
            }
        }
        return res;
    }
}

405. Submatrix Sum
/*这道题和求数组中哪些元素和为0的解决方法一样，只是数组中求的是前i个元素和前j个元素和相等，则i－j元素和为0，而这里只是变成2维的而已。
sum[i][j]表示matrix[0][0]到matrix[i-1][j-1]所有元素的和。
建立sum矩阵，为n＋1行，m＋1列。将第0行和第0列都初始化为0。
遍历matrix，根据公式 sum[i][j] = matrix[i - 1][j - 1] + sum[i][j - 1] + sum[i - 1][j] -sum[i - 1][j - 1] 计算所有sum。
然后取两个row：l1, l2。用一个线k从左到右扫过l1和l2，每次都用diff=sum[l1][k]-sum[l2][k]来表示l1-l2和0-k这个矩形元素的sum。
如果在同一个l1和l2中，有两条线（k1，k2）的diff相等，则表示l1-l2和k1-k2这个矩形中的元素和为0。*/
public class Solution {
    /*
     * @param matrix: an integer matrix
     * @return: the coordinate of the left-up and right-down number
     */
    public int[][] submatrixSum(int[][] matrix) {
        // Write your code here
        int[][] res = new int[2][2];
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return res;
        }

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] sum = new int[m + 1][n + 1];

        for(int i = 0; i < m; i++){
            sum[i][0] = 0;
        }

        for(int j = 0; j < n; j++){
            sum[0][j] = 0;
        }

        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                sum[i][j] = matrix[i - 1][j - 1] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];
            }
        }

        for(int l = 0; l < m; l++){
            for(int h = l + 1; h <= m; h++){
                HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
                for(int k = 0; k <= n; k++){
                    int diff = sum[h][k] - sum[l][k];
                    if(map.containsKey(diff)){
                    //正常情况下应该和之前的subarray//sum一致，第一个为下一个开始，最后一个要包含
                    //但是现在矩阵加了一维，所以要减1
                        res[0][0] = l;
                        res[0][1] = map.get(diff);
                        res[1][0] = h - 1;
                        res[1][1] = k - 1;
                        return res;
                    }else{
                        map.put(diff, k);
                    }
                }
            }
        }

        return res;
    }
}
404. Subarray Sum II 
/*和I一样，用prefix来解。首先计算prefix，然后根据prefix来计算每一段subarray的sum。
右边prefix－左边prefix等于中间这一段subarray的sum。
左边prefix从0枚举到n－1，右边prefix从当前左边往右一位开始枚举到n，这样可以得到所有sunarray的sum，
每一个sum如果在interval之内则count增加1个。O(n^2)。*/
class Solution {
    /**
     * @param A an integer array
     * @param start an integer
     * @param end an integer
     * @return the number of possible answer
     */
    public int subarraySumII(int[] A, int start, int end) {
        if (A == null || A.length == 0 || start > end) {
            return 0;
        }

        int count = 0;
        int[] sum = new int[A.length + 1];
        sum[0] = 0;

        for (int i = 1; i <= A.length; i++) {
            sum[i] = sum[i - 1] + A[i - 1];
        }

        for (int i = 0; i < A.length; i++) {
            for (int j = i + 1; j < A.length + 1; j++) {
                int diff = sum[j] - sum[i];
                if (diff >= start && diff <= end) {
                    count++;
                }
            }
        }
        return count;
    }

}
